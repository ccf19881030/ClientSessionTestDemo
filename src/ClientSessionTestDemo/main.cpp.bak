#include "CSession.h"
#include "type.h"
#include <boost/thread.hpp>
#include <iostream>

using namespace std;

class client
{
public:
	boost::shared_ptr<CSession> m_pSocket;//创建继承于enable_shared_from_this类的对象时必须使用智能指针
};
std::vector<client> client_queue;//存储生成的客户端实例

int main(int argc, char* argv[])
{
	boost::asio::io_service m_io_service;
	boost::asio::io_service::work m_work(m_io_service);//即使io任务完成，也不退出

	std::string IP = "127.0.0.1";
	unsigned short port = 8104;
	int heartbeat = 10;

	for (int i = 0; i < client_queue.size(); i++)
	{
		boost::shared_ptr<CSession>p(new CSession(IP, port, heartbeat, (m_io_service)));
		client_queue.at(i).m_pSocket->start();
	}
	boost::thread t(boost::bind(&boost::asio::io_service::run, boost::ref(m_io_service)));

	//至少有一个线程运行
	int thread_count = (std::max)(static_cast<int>(boost::thread::hardware_concurrency()), 1);
	
	boost::thread_group tg;
	for (int i = 0; i < thread_count; i++)
	{
		tg.create_thread(boost::bind(&boost::asio::io_service::run, boost::ref(m_io_service)));
		boost::this_thread::sleep(boost::posix_time::seconds(5));
	}

	return 0;
}
